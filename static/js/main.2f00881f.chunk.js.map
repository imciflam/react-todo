{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","cursor","float","Todos","todos","map","components_TodoItem","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","defineProperty","target","name","display","flex","placeholder","className","About","Fragment","Header","headerStyle","Link","linkStyle","to","textAlign","App","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","BrowserRouter","Route","exact","path","render","AddTodo_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f00881f.chunk.js","sourcesContent":["import React, { Component } from 'react' //rce shortcut\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => { \r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n          }      \r\n    } \r\n\r\n    /*markComplete = (e)=> {//doesn't have access to component's stuff since it's a custom function\r\n        console.log(this.props);\r\n    }*/\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n        <div style={this.getStyle()}> \r\n        <p>\r\n        <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>{ ' '}\r\n        {this.props.todo.title} \r\n        <button onClick={this.props.delTodo.bind(this,id)} style = {btnStyle}>x</button>\r\n        </p>\r\n      </div>\r\n    )//equals to title\r\n  }\r\n}\r\n\r\nTodoItem.propTypes =\r\n{\r\n    todo:PropTypes.object.isRequired\r\n}\r\n\r\nconst itemStyle = \r\n{\r\n    backgroundColor: '#f4f4f4'\r\n}\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color:'#ffffff',\r\n  cursor:'pointer',\r\n  float:'right'\r\n}\r\nexport default TodoItem\r\n","import React, { Component } from 'react';  \r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Todos extends Component { \r\n  render() {\r\n     // console.log(this.props.todos);//props of todo \r\n    return this.props.todos.map((todo) => \r\n    (\r\n        <TodoItem key={todo.id} todo ={todo} markComplete = {this.props.markComplete} delTodo={this.props.delTodo}/>//unique key props\r\n    )\r\n    );\r\n  }\r\n}\r\n\r\nTodos.propTypes =\r\n{\r\n    todos:PropTypes.array.isRequired,\r\n    merkComplete:PropTypes.array.isRequired,\r\n    delTodo:PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\n\r\nexport default class AddTodo extends Component {\r\n\r\n    state = {\r\n        title:''\r\n    }\r\n\r\n    onSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''})\r\n    }\r\n    onChange=(e)=>this.setState({[e.target.name]:e.target.value});\r\n  render() {\r\n    return (\r\n      <form onSubmit = {this.onSubmit} style ={{display:'flex'}}>\r\n          <input \r\n          type = \"text\" \r\n          name = \"title\" \r\n          style = {{flex:10,padding:'5px'}}\r\n          placeholder=\"add todo..\" \r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n          />\r\n          <input \r\n          type=\"submit\"\r\n          value = \"Submit\"\r\n          className=\"btn\"\r\n          style={{flex:1}}/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\n function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>Todolist, react version</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default About;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nexport default function Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n        <h1>To-Do List</h1>\r\n        <Link style ={linkStyle} to = \"/react-todo\"> Home</Link>|<Link style ={linkStyle} to = \"/react-todo/about\">About</Link>\r\n    </header>\r\n  )\r\n}\r\nconst headerStyle={\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}\r\n\r\nconst linkStyle = \r\n{\r\n    color:'#fff',\r\n    textDecoration:'none'\r\n}","import React, { Component } from 'react'; \r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Todos from './components/Todos';\r\nimport AddTodo from './components/AddTodo';\r\nimport About from './components/pages/About';\r\nimport Header from './components/layout/Header'\r\nimport uuid from 'uuid'\r\nimport axios from 'axios'\r\n\r\nclass App extends Component {\r\n  state= //cloud of data\r\n  {\r\n    todos: [\r\n      //hardcoded\r\n      /*{\r\n        id: uuid.v4(),\r\n        title: 'todo1',\r\n        completed: false\r\n      },\r\n      {\r\n        id: uuid.v4(),\r\n        title: 'todo2',\r\n        completed: false\r\n      },\r\n      {\r\n        id: uuid.v4(),\r\n        title: 'todo3',\r\n        completed: false\r\n      },*/\r\n    ]\r\n  }\r\n  componentDidMount() {\r\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\r\n      .then(res => this.setState({ todos: res.data }))\r\n  }\r\n\r\n  //toggle complete\r\n  markComplete = (id) => {\r\n    this.setState({ todos: this.state.todos.map(todo => {\r\n      if (todo.id === id)  {\r\n        todo.completed =!todo.completed;\r\n      }\r\n      return todo;\r\n    })});//if matched, update\r\n  }\r\n  //delete todo\r\ndelTodo = (id)=>{\r\n  //console.log(id);\r\n  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res=>this.setState({todos:[...this.state.todos.filter(todo=>todo.id!==id)]}))\r\n  //this.setState({todos:[...this.state.todos.filter(todo=>todo.id!==id)]})\r\n}\r\n//add\r\naddTodo = (title) =>{\r\n  /*const newTodo = {\r\n    id:uuid.v4(),\r\n    title:title,\r\n    completed:false \r\n  }\r\n  this.setState({todos:[...this.state.todos, newTodo]})*/\r\n  axios.post('https://jsonplaceholder.typicode.com/todos',{\r\n    title:title,\r\n    completed:false\r\n  })\r\n  .then(res=>this.setState({todos:\r\n  [...this.state.todos,res.data]}));\r\n}\r\n  render() {\r\n    //console.log(this.state.todos);\r\n    return (\r\n      <Router> \r\n      <div className=\"App\">\r\n      <div className = 'container'> \r\n      <Header/>\r\n      <Route exact path = '/' render = {props => (\r\n      <React.Fragment>\r\n      <AddTodo addTodo = {this.addTodo}/>\r\n        <Todos todos = {this.state.todos} markComplete={this.markComplete} delTodo = {this.delTodo}/>     {/* slipping props into Todos */}\r\n\r\n      </React.Fragment>  \r\n       )}/>\r\n       <Route path = \"/about\" component = {About}/>\r\n      </div>\r\n      </div>\r\n      </Router>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}